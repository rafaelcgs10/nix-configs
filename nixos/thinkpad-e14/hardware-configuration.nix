# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

let
  oldpkgs = import (builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz";
  }) {};

in
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
      # ../modules/qbittorrent.nix
    ];
  # services.qbittorrent.enable = true;
  # users.users.qbittorrent.isSystemUser = true;
  # users.users.qbittorrent.group = "qbittorrent";

  services.clamav.daemon.enable = true;
  services.clamav.updater.enable = true;
  systemd.services.clamav-daemon.serviceConfig = {
    StateDirectory = "clamav";
  };

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "amdgpu" ];
  boot.kernelModules = [ "kvm-amd" ];
  # boot.blacklistedKernelModules = [ "rtw88_8821ce" ];

  services.xserver = {
    libinput = {
      enable = true;

      mouse = {
        disableWhileTyping = true;
        accelProfile = "flat";
        accelSpeed = "0";
      };
    };

    # videoDrivers = [ "amdgpu" ];

    serverLayoutSection = ''
      Option "BlankTime" "0"
      Option "StandbyTime" "0"
      Option "SuspendTime" "0"
      Option "OffTime" "0"
    '';

    deviceSection = ''
      Option "DRI" "3"
      Option "TearFree" "True"
    '';
  };

  services.autorandr.enable = true;
  systemd.services.autorandr = {
    startLimitIntervalSec = lib.mkForce 10;
    startLimitBurst = lib.mkForce 5;
    serviceConfig = {
      ExecStart = lib.mkForce "${pkgs.autorandr}/bin/autorandr -c --batch";
      Type = lib.mkForce "simple";
    };
  };
  services.xserver.libinput.touchpad.tappingDragLock = false;
  services.xserver.libinput.touchpad.tapping = false;
  services.xserver.libinput.mouse.tapping = false;

  systemd.sleep.extraConfig = ''
      HibernateDelaySec=3m
    '';

  services.logind.lidSwitchExternalPower = "suspend";
  services.logind.lidSwitch = "suspend";
  services.logind.killUserProcesses = true;
  services.logind.extraConfig = ''
    HandlePowerKey=suspend
  '';
  # services.tlp.enable = true;

  hardware.opengl.extraPackages = with pkgs; [
    amdvlk
    rocm-opencl-icd
    rocm-opencl-runtime
  ];

  hardware.opengl.extraPackages32 = with pkgs; [
    driversi686Linux.amdvlk
  ];

  hardware.opengl.driSupport = true;
  hardware.opengl.driSupport32Bit = true;

  # wifi fix
  # boot.extraModulePackages = with config.boot.kernelPackages; [ rtw89 ];

  services.earlyoom = {
    enable = true;
    freeMemThreshold = 3;
  };

  programs.adb.enable = true;

  programs.light.enable = true;
  services.acpid.enable = true;
  services.acpid.handlers = {
    brightness-up = {
      action = "/run/current-system/sw/bin/light -A 5";
      event = "video/brightnessup.*";
    };
    brightness-down = {
      action = "/run/current-system/sw/bin/light -U 5";
      event = "video/brightnessdown.*";
    };
  };
  boot.kernelParams = [
    # Force use of the thinkpad_acpi driver for backlight control.
    # This allows the backlight save/load systemd service to work.
    "acpi_backlight=native"
    "mitigations=off"
  ];

  systemd = {
    extraConfig = "DefaultTimeoutStopSec=10s";
  };

  programs.xwayland.enable = true;
  services.xserver = {
    layout = "br";
    xkbVariant = "thinkpad";
  };
  systemd.user.services.xmodmap = {
    serviceConfig.PassEnvironment = "DISPLAY";
    script = ''
      ${pkgs.xorg.xmodmap}/bin/xmodmap -e "keycode 107 = Menu"
  '';
    wantedBy = [ "graphical-session.target" ];
    partOf = [ "graphical-session.target" ];
  };
  # For mount.cifs, required unless domain name resolution is not needed.
  environment.systemPackages = [ pkgs.cifs-utils ];
  fileSystems."/rafael_mounts" = {
    device = "//192.168.0.104";
    fsType = "cifs";
    options = let
      # this line prevents hanging on network split
      automount_opts = "x-systemd.automount,noauto,x-systemd.idle-timeout=60,x-systemd.device-timeout=5s,x-systemd.mount-timeout=5s";

    in ["${automount_opts},credentials=/home/rafael/.smb-secrets,uid=1000,gid=100,_netdev"];
  };

  # fileSystems."/" =
  #   { device = "/dev/disk/by-uuid/d8954d69-692d-4c52-8eaa-e4a1784d0b14";
  #     fsType = "ext4";
  #   };

  # fileSystems."/SSD" =
  #   { device = "/dev/disk/by-label/ssd";
  #     fsType = "ntfs3";
  #     options = [ "rw" "nofail" "uid=1000"];
  #   };

  fileSystems."/boot" =
    { device = "/dev/disk/by-label/ROOT";
      fsType = "vfat";
    };

  fileSystems."/" =
    { device = "/dev/disk/by-label/nixos2";
      fsType = "btrfs";
      options = [ "discard=async" "subvol=root" "compress=zstd" "datacow" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-label/nixos2";
      fsType = "btrfs";
      options = [ "discard=async" "subvol=home" "compress=zstd" "datacow" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-label/nixos2";
      fsType = "btrfs";
      options = [ "discard=async" "subvol=nix" "compress=zstd" "noatime" "datacow" ];
    };

  # swapDevices = [ { device = "/dev/disk/by-label/swap2"; } ];
  swapDevices = lib.mkForce [ ];
  zramSwap.enable = true;
  zramSwap.algorithm = "zstd";
  zramSwap.priority = 10;

  boot.kernel.sysctl = { "vm.swappiness" = 10;};

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  boot.postBootCommands = ''
    echo none > /sys/block/nvme1n1/queue/scheduler
  '';
    # echo 1 > /sys/block/nvme1n1/queue/iosched/fifo_batch

  # boot.kernel.sysctl."vm.dirty_background_bytes" = 16 * 1024 * 1024;
  # boot.kernel.sysctl."vm.dirty_bytes" = 16 * 1024 * 1024;

  boot.kernelPackages = pkgs.linuxPackages_latest;
  # boot.kernelPackages = pkgs.linuxPackages_zen;
  # environment.systemPackages = with pkgs; [
  #   linuxPackages_zen.perf
  # ];


  fileSystems."/tmp" = {
    device = "tmpfs";
    fsType = "tmpfs";
    options = [ "mode=1777" "size=8G"  "lazytime" "nosuid" "nodev" ];
  };

  networking.hostName = "thinkpad";

  # Wireguard fix
  networking.firewall.checkReversePath = false;

  # virtualisation.virtualbox.host.enable = true;
  # users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];

  # Printer and scanner stuff
  services.printing.enable = true;
  services.printing.browsing = true;
  services.printing.drivers = [ pkgs.hplipWithPlugin pkgs.gutenprint pkgs.gutenprintBin pkgs.foomatic-db-ppds-withNonfreeDb pkgs.cups-drv-rastertosag-gdi pkgs.canon-cups-ufr2 ];

  hardware.sane.enable = true;
  hardware.sane.extraBackends = [ pkgs.hplipWithPlugin ];
  users.users.rafael.extraGroups = [ "scanner" "lp" "adbusers" ];

  # Docker config
  virtualisation.docker = {
    enable = true;
    enableOnBoot = false;
  };
  systemd.services.docker.serviceConfig.KillMode = "mixed";
  # virtualisation.podman = {
  #   enable = true;
  # };

  services.syncthing = {
    user = "rafael";
    group = "users";
    dataDir = "/home/rafael";
    enable = true;
    relay.enable = true;
  };
  systemd.services.syncthing = {
    serviceConfig = {
      RestartSec = 10;
      Restart = lib.mkForce "always";
      Type = lib.mkForce "simple";
    };
  };

  # fileSystems."/proton_drive" = {
  #   device = "proton_drive:/";
  #   fsType = "rclone";
  #   options = [
  #     "nodev"
  #     "nofail"
  #     "allow_other"
  #     "args2env"
  #     "config=/home/rafael/.config/rclone/rclone.conf"
  #   ];
  # };


  # Enable cron service
  services.cron = {
    enable = true;
    systemCronJobs = [
      "* * * * *     rafael    cd /home/rafael/zsh_history; for c in zsh_history.sync-conflict-*; do git merge-file zsh_history empty.history $c;done; rm zsh_history.sync-conflict-*"
      "5 * * * *     rafael    rm /home/rafael/Downloads/*.torrent"
    ];
  };

  services = {
    udev.extraRules = ''
      SUBSYSTEM=="block", ENV{ID_FS_TYPE}=="ntfs", ENV{ID_FS_TYPE}="ntfs3"
    '';
  };


  hardware.bluetooth.enable = true;
  # services.blueman.enable = true;
  systemd.services.bluetooth.serviceConfig.ExecStart = [
    ""
    "${pkgs.bluez}/libexec/bluetooth/bluetoothd --noplugin=sap,avrcp"
  ];

  powerManagement.cpuFreqGovernor = "ondemand";

  systemd.timers.hibernate-on-low-battery = {
    wantedBy = [ "multi-user.target" ];
    timerConfig = {
      OnUnitActiveSec = "120";
      OnBootSec= "120";
    };
  };
  systemd.services.hibernate-on-low-battery =
    let
      battery-level-sufficient = pkgs.writeShellScriptBin
        "battery-level-sufficient" ''
        test "$(cat /sys/class/power_supply/BAT0/status)" != Discharging \
          || test "$(cat /sys/class/power_supply/BAT0/capacity)" -ge 5
      '';
    in
      {
        serviceConfig = { Type = "oneshot"; };
        onFailure = [ "hibernate.target" ];
        script = "${battery-level-sufficient}/bin/battery-level-sufficient";
      };

  # virtualisation.oci-containers.containers.jellyfin = {
  #   autoStart = true;
  #   environment = {
  #     PUID = "1002";
  #     PGID = "100";
  #   };
  #   extraOptions = [
  #     "--privileged"
  #     "--memory=800m"
  #     # "--gpus=all" "--device=/dev/dri:/dev/dri"
  #   ];

  #   image = "lscr.io/linuxserver/jellyfin";
  #   ports = [ "8096:8096" "8443:8443" ];
  #   volumes = [
  #     "/home/rafael/jellyfin/cache:/cache"
  #     "/home/rafael/jellyfin/config:/config"
  #     "/home/rafael/media:/data/media"
  #   ];
  # };

  # services.cloudflared = {
  #   enable = true;
  #   user = "rafael";
  #   tunnels.tunnel = {
  #     credentialsFile = "/home/rafael/Documents/private_keys/cloudflare_tunne/cloudflare_tunnel.json";
  #     default = "http_status:404";
  #     ingress = {
  #       "jellyfin.rafaelcgs.com" = "http://localhost:8096";
  #     };
  #   };
  # };

  # Wayland for Electon
  environment.sessionVariables.NIXOS_OZONE_WL = "1";

  virtualisation.virtualbox.host.enable = true;
  nixpkgs.config.virtualbox.host.enableExtensionPack = true;

  users.extraGroups.vboxusers.members = [ "rafael" ];

  # services.xserver.desktopManager.kodi.enable = true;
  # services.xserver.desktopManager.kodi.package = pkgs.kodi.withPackages (p: with p; [ future osmc-skin jellyfin inputstream-rtmp inputstreamhelper inputstream-adaptive inputstream-ffmpegdirect requests myconnpy dateutil invidious joystick ]);

  # virtualisation.oci-containers.containers.cloudflared-tunnel = {
  #   image = "cloudflare/cloudflared:latest";
  #   cmd = ["tunnel" "--no-autoupdate" "run"];
  #   extraOptions = ["--network" "host"];
  #   environmentFiles = ["/home/rafael/Documents/private_keys/cloudflare_tunne/token"];
  # };

}
