# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

let
  oldpkgs = import (builtins.fetchTarball {
    url = "https://github.com/NixOS/nixpkgs/archive/c82b46413401efa740a0b994f52e9903a4f6dcd5.tar.gz";
  }) {};


  oldBluez = oldpkgs.bluez;
in
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "amdgpu" ];
  boot.kernelModules = [ "kvm-amd" ];

  services.xserver = {
    libinput = {
      enable = true;

      mouse = {
        disableWhileTyping = true;
        accelProfile = "flat";
        accelSpeed = "0";
        calibrationMatrix = ".5 0 0 0 .5 0 0 0 1";
      };
    };

    videoDrivers = [ "amdgpu" ];

    serverLayoutSection = ''
      Option "BlankTime" "0"
      Option "StandbyTime" "0"
      Option "SuspendTime" "0"
      Option "OffTime" "0"
    '';

    deviceSection = ''
      Option "DRI" "3"
      Option "TearFree" "True"
    '';
  };
  services.autorandr.enable = true;
  systemd.services.autorandr = {
    serviceConfig = {
      RestartSec = 5;
      Restart = "on-failure";
    };
  };
  services.xserver.libinput.touchpad.tappingDragLock = false;
  services.xserver.libinput.touchpad.tapping = false;
  services.xserver.libinput.mouse.tapping = false;

  systemd.sleep.extraConfig = ''
      HibernateDelaySec=3m
    '';

  services.logind.lidSwitchExternalPower = "suspend";
  services.logind.lidSwitch = "hybrid-sleep";
  services.logind.killUserProcesses = true;
  services.tlp.enable = true;

  hardware.opengl.extraPackages = with pkgs; [
    amdvlk
    rocm-opencl-icd
    rocm-opencl-runtime
  ];

  hardware.opengl.extraPackages32 = with pkgs; [
    driversi686Linux.amdvlk
  ];

  hardware.opengl.driSupport = true;
  hardware.opengl.driSupport32Bit = true;

  boot.extraModulePackages = with config.boot.kernelPackages; [ rtw89 ];

  services.earlyoom = {
    enable = true;
    useKernelOOMKiller = true;
    freeMemThreshold = 5;
  };

  programs.light.enable = true;
  services.acpid.enable = true;
  services.acpid.handlers = {
    brightness-up = {
      action = "/run/current-system/sw/bin/light -A 5";
      event = "video/brightnessup.*";
    };
    brightness-down = {
      action = "/run/current-system/sw/bin/light -U 5";
      event = "video/brightnessdown.*";
    };
  };
  boot.kernelParams = [
    # Force use of the thinkpad_acpi driver for backlight control.
    # This allows the backlight save/load systemd service to work.
    "acpi_backlight=native"
  ];

  services.xserver = {
    layout = "br";
    xkbVariant = "thinkpad";
  };
  systemd.user.services.xmodmap = {
    serviceConfig.PassEnvironment = "DISPLAY";
    script = ''
      ${pkgs.xorg.xmodmap}/bin/xmodmap -e "keycode 107 = Menu"
  '';
    wantedBy = [ "graphical-session.target" ];
    partOf = [ "graphical-session.target" ];
  };


  fileSystems."/" =
    { device = "/dev/disk/by-uuid/d8954d69-692d-4c52-8eaa-e4a1784d0b14";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D412-AF4E";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-label/swap"; }
    ];

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  boot.postBootCommands = ''
    echo mq-deadline > /sys/block/nvme0n1/queue/scheduler
    echo 1 > /sys/block/nvme0n1/queue/iosched/fifo_batch
  '';

  boot.kernelPackages = pkgs.linuxPackages_zen;


  fileSystems."/tmp" = {
    device = "tmpfs";
    fsType = "tmpfs";
    options = [ "mode=1777" "lazytime" "nosuid" "nodev" ];
  };

  networking.hostName = "thinkpad";

  programs.steam.enable = true;

  # virtualisation.virtualbox.host.enable = true;
  # users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];

  # Printer and scanner stuff
  services.printing.enable = true;
  services.printing.drivers = [ pkgs.hplipWithPlugin ];
  hardware.sane.enable = true;
  hardware.sane.extraBackends = [ pkgs.hplipWithPlugin ];
  users.users.rafael.extraGroups = [ "scanner" "lp" ];

  # Docker config
  virtualisation.docker = {
    enable = true;
    enableOnBoot = false;
  };
  systemd.services.docker.serviceConfig.KillMode = "mixed";
  virtualisation.podman = {
    enable = true;
  };

  services.syncthing = {
    user = "rafael";
    group = "users";
    dataDir = "/home/rafael";
    enable = true;
    relay.enable = true;
  };

  # Enable cron service
  services.cron = {
    enable = true;
    systemCronJobs = [
      "* * * * *     rafael    cd /home/rafael/zsh_history; for c in zsh_history.sync-conflict-*; do git merge-file zsh_history empty.history $c;done; rm zsh_history.sync-conflict-*"
    ];
  };

  hardware.bluetooth.enable = true;
  services.blueman.enable = true;
  hardware.bluetooth.package = oldBluez;

  powerManagement.cpuFreqGovernor = "ondemand";

  systemd.timers.hibernate-on-low-battery = {
    wantedBy = [ "multi-user.target" ];
    timerConfig = {
      OnUnitActiveSec = "120";
      OnBootSec= "120";
    };
  };
  systemd.services.hibernate-on-low-battery =
    let
      battery-level-sufficient = pkgs.writeShellScriptBin
        "battery-level-sufficient" ''
        test "$(cat /sys/class/power_supply/BAT0/status)" != Discharging \
          || test "$(cat /sys/class/power_supply/BAT0/capacity)" -ge 5
      '';
    in
      {
        serviceConfig = { Type = "oneshot"; };
        onFailure = [ "hibernate.target" ];
        script = "${battery-level-sufficient}/bin/battery-level-sufficient";
      };

}
