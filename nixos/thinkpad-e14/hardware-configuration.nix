# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "amdgpu" ];
  boot.kernelModules = [ "kvm-amd" ];
  services.xserver = {
    videoDrivers = [ "amdgpu" ];

    deviceSection = ''
      Option "DRI" "2"
      Option "TearFree" "True"
    '';
  };

    hardware.opengl.extraPackages = with pkgs; [
    rocm-opencl-icd
    rocm-opencl-runtime
    amdvlk
  ];

  hardware.opengl.extraPackages32 = with pkgs; [
    driversi686Linux.amdvlk
  ];

  hardware.opengl = {
    driSupport = lib.mkDefault true;
    driSupport32Bit = lib.mkDefault true;
  };

  boot.extraModulePackages = with config.boot.kernelPackages; [ rtw89 ];

  services.earlyoom = {
    enable = true;
    useKernelOOMKiller = true;
    freeMemThreshold = 5;
  };

  programs.light.enable = true;
  services.acpid.enable = true;
  services.acpid.handlers = {
    brightness-up = {
      action = "/run/current-system/sw/bin/light -A 5";
      event = "video/brightnessup.*";
    };
    brightness-down = {
      action = "/run/current-system/sw/bin/light -U 5";
      event = "video/brightnessdown.*";
    };
  };
  boot.kernelParams = [
    # Force use of the thinkpad_acpi driver for backlight control.
    # This allows the backlight save/load systemd service to work.
    "acpi_backlight=native"
  ];

  services.xserver = {
    layout = "br";
    xkbVariant = "thinkpad";
  };


  fileSystems."/" =
    { device = "/dev/disk/by-uuid/d8954d69-692d-4c52-8eaa-e4a1784d0b14";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D412-AF4E";
      fsType = "vfat";
    };

  zramSwap = {
    enable = true;
    priority = 5;
    swapDevices = 1;
    memoryPercent = 50;
  };

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # boot.postBootCommands = ''
  #  echo mq-deadline > /sys/block/sda/queue/scheduler
  #  echo mq-deadline > /sys/block/sdb/queue/scheduler
  #  echo 1 > /sys/block/sda/queue/iosched/fifo_batch
  #  echo 1 > /sys/block/sdb/queue/iosched/fifo_batch
  # '';

  boot.kernelPackages = pkgs.linuxPackages_5_15;

  boot.kernel.sysctl = {
    "sched_latency_ns" = "1000000";
    "sched_min_granularity_ns" = "100000";
    "sched_migration_cost_ns"  = "7000000";
  };


  fileSystems."/tmp" = {
    device = "tmpfs";
    fsType = "tmpfs";
    options = [ "mode=1777" "lazytime" "nosuid" "nodev" ];
  };

  networking.hostName = "thinkpad";

  programs.steam.enable = true;

  # virtualisation.virtualbox.host.enable = true;
  # users.extraGroups.vboxusers.members = [ "user-with-access-to-virtualbox" ];

  # Docker config
  virtualisation.docker = {
    enable = true;
    enableOnBoot = false;
  };

  services.syncthing = {
    user = "rafael";
    group = "users";
    dataDir = "/home/rafael";
    enable = true;
    relay.enable = true;
  };

  # Enable cron service
  services.cron = {
    enable = true;
    systemCronJobs = [
      "* * * * *     rafael    cd /home/rafael/zsh_history; for c in zsh_history.sync-conflict-*; do git merge-file zsh_history empty.history $c;done; rm zsh_history.sync-conflict-*"
    ];
  };

  hardware.bluetooth.enable = true;
  services.blueman.enable = true;

  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";

}
